№1

import itertools
import time

class TrafficLight:
    __color: str
    __timing: dict
    def __init__(self, red_time: int = 5, yellow_time: int = 2, green_time: int = 5):
        self.__timing = {
            "красный": red_time,
            "желтый": yellow_time,
            "зеленый": green_time
        }
    def running(self):
        for mode, timer in itertools.cycle(self.__timing.items()):
            self.__color = mode

            for second in range(timer):
                print(f"{self} [{second + 1}]")
                time.sleep(1)
    def __repr__(self):
        return f"цвет светофора в текущий момент = {self.__color}"
try:
    traffic_light = TrafficLight(7, 2, 5)
    traffic_light.running()
except KeyboardInterrupt:
    print("Exit the program")
    
    №2
    
    class Road:
    __mass: float = 25.0
    _length: float
    _width: float
    def __init__(self, length: float, width: float):
        self._length = length
        self._width = width
    def calculate(self, depth: float = 1):
        return (self._length * self._width * self.__mass * depth) / 1000
road = Road(20, 5000)
calculation = road.calculate(5)
print(f"{calculation} т")

    №3
    
class Worker:
    name: str
    surname: str
    position: str
    _income: dict
    def __init__(self, name: str, surname: str, position: str, wage: int, bonus: int):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {
            "wage": wage,
            "bonus": bonus}
class Position(Worker):
    def get_full_name(self):
        return f"{self.name} {self.surname}"

    def get_total_income(self):
        return sum(self._income.values())
ivan = Position("ivan", "ivanov", "manager", 5000, 500)
print(ivan.get_full_name(), ivan.get_total_income())
petr = Position("petr", "petrov", "top_manager", 10000, 1000)
print(petr.get_full_name(), petr.get_total_income())  

     #4
     
class Car:
    speed: int
    color: str
    name: str
    is_police: bool = False

    def __init__(self, speed: int, color: str, name: str) -> None:
        self.speed = speed
        self.color = color
        self.name = name

    def go(self):
        print(f"{self.name}: старт")

    def stop(self):
        print(f"{self.name}: стоп")

    def turn(self, direction: str):
        print(f"{self.name}: поворот - {direction}")

    def show_speed(self):
        print(f"{self.name}: скорость = {self.speed} км/ч")


class TownCar(Car):
    def show_speed(self):
        super().show_speed()
        if self.speed > 60:
            print(f"{self.name}: превышение скорости")


class SportCar(Car):
    pass


class WorkCar(Car):
    def show_speed(self):
        super().show_speed()
        if self.speed > 40:
            print(f"{self.name}: превышение скорости")


class PoliceCar(Car):
    is_police: bool = True


cars = [
    SportCar(240, 'red', 'Audi'),
    TownCar(180, 'silver', 'Kia'),
    WorkCar(80, 'white', 'Golf'),
    PoliceCar(170, 'black', 'Ford'),
]

cars[0].go()
cars[0].turn("направо")
cars[0].stop()

for car in cars:
    car.show_speed()
    
    #5
    
class Stationery:
    title: str
    _message = "Запуск"
    def draw(self):
        print(self._message)
class Pen(Stationery):
    title = 'Ручка'
    _message = f"{title} - рисует на бумаге."
class Pencil(Stationery):
    title = 'Карандаш'
    _message = f"{title} - рисует в журнале."
class Handle(Stationery):
    title = 'Маркер'
    _message = f"{title} - рисует везде."
items = [Pen(), Pencil(), Handle()]
for item in items:
    item.draw()
    
    №6
    
class Stationary:
    def __init__(self, title):
        self.title = title
    def draw(self):
        return f'Запуск отрисовки {self.title}'
class Pen(Stationary):
    def __init__(self, title):
        super().__init__(title)
    def draw(self):
        return f'Вы взяли {self.title}. Запуск отрисовки ручкой'
class Pencil(Stationary):
    def __init__(self, title):
        super().__init__(title)
    def draw(self):
        return f'Вы взяли {self.title}. Запуск отрисовки карандашом'
class Handle(Stationary):
    def __init__(self, title):
        super().__init__(title)
    def draw(self):
        return f'Вы взяли {self.title}. Запуск отрисовки маркером'
pen = Pen('Ручка')
pencil = Pencil('Карандаш')
handle = Handle('Маркер')
print(pen.draw())
print(pencil.draw())
print(handle.draw())

№1

class Matrix:
    value: list
    def __init__(self, value: list):
        self.value = value
    def __add__(self, other: 'Matrix'):
        try:
            rows_count = len(self.value)
            items_count = len(self.value[0])
            new_value = [
                [self.value[row][idx] + other.value[row][idx]
                    for idx in range(items_count)]
                for row in range(rows_count)]
            return Matrix(new_value)
        except IndexError:
            print("Ошибка - Матрицы разного размера")
            exit(1)
    def __str__(self):
        return "\n".join(
            str(row).strip('[]').replace(',', '')
            for row in self.value)
a = Matrix([
    [1, 2, 3],
    [4, 5, 6],])
b = Matrix([
    [6, 5, 4],
    [3, 2, 1],])
c = a + b
print(c)

№2

from abc import ABC, abstractmethod
class Clothes(ABC):
    name: str
    def __init__(self, name: str):
        self.name = name
    @property
    @abstractmethod
    def calculate(self) -> float:
        pass
class Coat(Clothes):
    _size: float
    def __init__(self, name: str, size: float):
        super().__init__(name)
        self._size = size
    @property
    def calculate(self) -> float:
        return self._size / 6.5 + 0.5
class Suit(Clothes):
    _height: float
    def __init__(self, name: str, height: float):
        super().__init__(name)
        self._height = height
    @property
    def calculate(self) -> float:
        return 2 * self._height + 0.3
coat = Coat('Пальто', 10)
print(coat.calculate)
suit = Suit('Костюм', 12)
print(suit.calculate)

№3

class Cell:
    __count: int

    def __init__(self, count: int):
        assert count > 0, "Количество ячеек должно быть больше 0"
        self.__count = count

    def __add__(self, other: 'Cell'):
        self.validate_item(other)
        value = self.count + other.count
        return Cell(value)

    def __sub__(self, other: 'Cell'):
        self.validate_item(other)
        value = self.count - other.count
        assert value > 0, "Разность ячеек меньше 0"
        return Cell(value)

    def __mul__(self, other: 'Cell'):
        self.validate_item(other)
        value = self.count * other.count
        return Cell(value)

    def __truediv__(self, other: 'Cell'):
        self.validate_item(other)
        value = round(self.count / self.count)
        return Cell(value)

    def __str__(self):
        return str(self.__count)

    def validate_item(self, other):
        assert isinstance(other, self.__class__), "Операции допустимы только между клетками"

    @property
    def count(self) -> int:
        return self.__count

    @staticmethod
    def make_order(cell_object: 'Cell', count_per_row: int) -> str:
        items = '*' * cell_object.count
        chunks = [
            items[idx:idx + count_per_row]
            for idx in range(0, len(items), count_per_row)
        ]

        return '\n'.join(chunks)


first = Cell(3)
second = Cell(2)
huge = Cell(12)

print(first + second)
print(first - second)
print(first * second)
print(first / second)

print(Cell.make_order(huge, 5))
